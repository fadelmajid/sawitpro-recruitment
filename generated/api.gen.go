// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.16.3 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
	openapi_types "github.com/oapi-codegen/runtime/types"
)

// DronePlan defines model for DronePlan.
type DronePlan struct {
	LandedAt *struct {
		X *int `json:"x,omitempty"`
		Y *int `json:"y,omitempty"`
	} `json:"landed_at,omitempty"`
	TotalDistance *int `json:"total_distance,omitempty"`
}

// Error defines model for Error.
type Error struct {
	Message *string `json:"message,omitempty"`
}

// Estate defines model for Estate.
type Estate struct {
	// Id Unique identifier for the estate
	Id *openapi_types.UUID `json:"id,omitempty"`

	// Length Length of the estate in 10m plots
	Length *int `json:"length,omitempty"`

	// Width Width of the estate in 10m plots
	Width *int `json:"width,omitempty"`
}

// EstateStats defines model for EstateStats.
type EstateStats struct {
	Count  *int `json:"count,omitempty"`
	Max    *int `json:"max,omitempty"`
	Median *int `json:"median,omitempty"`
	Min    *int `json:"min,omitempty"`
}

// Tree defines model for Tree.
type Tree struct {
	// EstateId ID of the estate this tree belongs to
	EstateId *openapi_types.UUID `json:"estate_id,omitempty"`

	// Height Height of the tree in meters (1 to 30)
	Height *int `json:"height,omitempty"`

	// Id Unique identifier for the tree
	Id *openapi_types.UUID `json:"id,omitempty"`

	// X X coordinate of the tree in its plot
	X *int `json:"x,omitempty"`

	// Y Y coordinate of the tree in its plot
	Y *int `json:"y,omitempty"`
}

// GetEstateIdDronePlanParams defines parameters for GetEstateIdDronePlan.
type GetEstateIdDronePlanParams struct {
	MaxDistance *int `form:"max_distance,omitempty" json:"max_distance,omitempty"`
}

// PostEstateJSONRequestBody defines body for PostEstate for application/json ContentType.
type PostEstateJSONRequestBody = Estate

// PostEstateIdTreeJSONRequestBody defines body for PostEstateIdTree for application/json ContentType.
type PostEstateIdTreeJSONRequestBody = Tree

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create a new estate
	// (POST /estate)
	PostEstate(ctx echo.Context) error
	// Calculate the drone's total travel distance with an optional max_distance parameter
	// (GET /estate/{id}/drone-plan)
	GetEstateIdDronePlan(ctx echo.Context, id openapi_types.UUID, params GetEstateIdDronePlanParams) error
	// Get stats of trees in an estate
	// (GET /estate/{id}/stats)
	GetEstateIdStats(ctx echo.Context, id openapi_types.UUID) error
	// Add a tree to an estate
	// (POST /estate/{id}/tree)
	PostEstateIdTree(ctx echo.Context, id openapi_types.UUID) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// PostEstate converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstate(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstate(ctx)
	return err
}

// GetEstateIdDronePlan converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdDronePlan(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Parameter object where we will unmarshal all parameters from the context
	var params GetEstateIdDronePlanParams
	// ------------- Optional query parameter "max_distance" -------------

	err = runtime.BindQueryParameter("form", true, false, "max_distance", ctx.QueryParams(), &params.MaxDistance)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter max_distance: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdDronePlan(ctx, id, params)
	return err
}

// GetEstateIdStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetEstateIdStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetEstateIdStats(ctx, id)
	return err
}

// PostEstateIdTree converts echo context to params.
func (w *ServerInterfaceWrapper) PostEstateIdTree(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "id" -------------
	var id openapi_types.UUID

	err = runtime.BindStyledParameterWithLocation("simple", false, "id", runtime.ParamLocationPath, ctx.Param("id"), &id)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter id: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.PostEstateIdTree(ctx, id)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/estate", wrapper.PostEstate)
	router.GET(baseURL+"/estate/:id/drone-plan", wrapper.GetEstateIdDronePlan)
	router.GET(baseURL+"/estate/:id/stats", wrapper.GetEstateIdStats)
	router.POST(baseURL+"/estate/:id/tree", wrapper.PostEstateIdTree)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xWUW/bRgz+KwQ3YBugxfKaAYXe0rXojA2Y0WTYhiEIrjraukK6U3hUEiPwfx/uZE1e",
	"dF7SIcn60BdDvhM/UuT3kbzF0jWts2TFY3GLvqyoUfHxNTtLy1rZ8Kdl1xKLoXhVK6tJXyiZXt2EH9m0",
	"hAUaK7Qmxm2Gm9TxNhuO3PsPVEp4UZyo+kIbL8qW9FCrN8yOp8E05L1a76N4YWPXB0C8KKEpitHhV5Mv",
	"2bRinMUCf7XmsiMwmqyYlSGGlWOQioB6lAxXjpuQIew6ozG7G0GGNdm1VFPsn+M5uNUeHhgL87yBtnbi",
	"R7C9DF8bnQL7LRx/HNbh3JyK6mnyzwSVrrOSrnujDhCiIW16aiXujH1o4c+YEhXrv/MiVbjF6zvJkMp4",
	"ECaC91Q7u/Yg7iHVq8isK5k6+DGeD04isLHQkBB7+HoO4uBF/k2yhB9HtAD9kEBvpqC/Q+kca2NDAu5E",
	"asRHZiQj3Eyx/vhvWNNihiNjV27q4iyUKFSpIjhZLkC7smvIigr3MR+n6trIkh28o5I7I+EWWnYB+Sh4",
	"N1IHX8n3TpYLzPCK2Pfu5kd5+FbXklWtwQJfHOVHOWbYKqkiv2Y0tgrnEyT4gSmkQ4Gl67EjBIrGmBca",
	"C1w6L2+GK6bLjry8cnrTK8oK9ZpSbVubMprNPnhnxy4dnr5kWmGBX8zGNj7b9fDZDjwmNuAbJo2FcEfx",
	"wLfO+l4v3+XzJ/GaSooOuT3O88dzGHt/wt8rpeFdn9fg8/vn8LmwQmxVDafEV8QwvJih75pG8eYgOUSt",
	"PRZ/7nqXx/NgtCPa7Nbo7UyHgfxtu5vIa0rxTtVlV/dtjSAafBUamqgahNUV1TCMVrg2UoGy4KKxqqFR",
	"N38PXmgVq9i0Jrx9SzvaLvS4IgRx7AzCV9xiaOFRMJihVU3Uvsa7RMz28n1PI9tmO9DLjngzou5Hjft4",
	"jbGm6Ros5onucz5RwOORY8xKgiC//PR/8f84P356nz0zwDqBleus/rSE9yTqGIQb8VK69cPWlJTsWxKI",
	"b8ThyUQ+TE5lD42NPfn169gzSO8p1bK/WX7Wyyell/upef/QkmFBT+5JJ1qD6tdFcf9C+nFXWuizfu99",
	"HtI//lYWw3/mnWz0+XkjSxH9MA0Hgkf2B3oHuwjU067jGgusRNpiNqtdqerKeSle5i9z3J5v/woAAP//",
	"T9jWFV8RAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
